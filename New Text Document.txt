package com.app.entities;

import java.time.LocalDate;

import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Table;

@Entity
@Table(name = "railways")
public class Railway {

	@javax.persistence.Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long Id;
	
	private String Name;
	
	@Enumerated(EnumType.STRING)
	private Category cat;
	private LocalDate startDate;
	private LocalDate endDate;
	
	private String source;
	private String destination;
	
	private String stationCode;
	
	private int distance;
	
	private int frequency;

	public Long getId() {
		return Id;
	}

	public void setId(Long id) {
		Id = id;
	}

	public String getName() {
		return Name;
	}

	public void setName(String name) {
		Name = name;
	}

	public Category getCat() {
		return cat;
	}

	public void setCat(Category cat) {
		this.cat = cat;
	}

	public LocalDate getStartDate() {
		return startDate;
	}

	public void setStartDate(LocalDate startDate) {
		this.startDate = startDate;
	}

	public LocalDate getEndDate() {
		return endDate;
	}

	public void setEndDate(LocalDate endDate) {
		this.endDate = endDate;
	}

	public String getSource() {
		return source;
	}

	public void setSource(String source) {
		this.source = source;
	}

	public String getDestination() {
		return destination;
	}

	public void setDestination(String destination) {
		this.destination = destination;
	}

	public String getStationCode() {
		return stationCode;
	}

	public void setStationCode(String stationCode) {
		this.stationCode = stationCode;
	}

	public int getDistance() {
		return distance;
	}

	public void setDistance(int distance) {
		this.distance = distance;
	}

	public int getFrequency() {
		return frequency;
	}

	public void setFrequency(int frequency) {
		this.frequency = frequency;
	}

	@Override
	public String toString() {
		return "Railway [Id=" + Id + ", Name=" + Name + ", cat=" + cat + ", startDate=" + startDate + ", endDate="
				+ endDate + ", source=" + source + ", destination=" + destination + ", stationCode=" + stationCode
				+ ", distance=" + distance + ", frequency=" + frequency + "]";
	}

	public Railway(Long id, String name, Category cat, LocalDate startDate, LocalDate endDate, String source,
			String destination, String stationCode, int distance, int frequency) {
		super();
		Id = id;
		Name = name;
		this.cat = cat;
		this.startDate = startDate;
		this.endDate = endDate;
		this.source = source;
		this.destination = destination;
		this.stationCode = stationCode;
		this.distance = distance;
		this.frequency = frequency;
	}

	public Railway() {
		super();
	}
	
	
	
	
}

package com.app.entities;

public enum Category {
	
	EXPRESS,SHATABDI,AC,METRO

}
package com.app.Services;

import java.time.LocalDate;
import java.util.List;
import java.util.stream.Collector;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.app.Repositories.RailwayRepository;
import com.app.entities.Railway;

@Service
@Transactional
public class RailwayService implements IRailwayService {
	@Autowired
	private RailwayRepository railwayrepo;
    
	@Autowired
	private ModelMapper modelmapper;
	@Override
	public List<Railway> GetAllRailway() {
		
		return railwayrepo.findAll()
				.stream()
				.collect(Collectors.toList());
	}
	@Override
	public Railway InsertRailway(Railway newrailway) {
		
		//LocalDate date=LocalDate.parse(newrailway.getEndDate());
		return railwayrepo.save(newrailway);
	}
	@Override
	public String DeleteById(Long id) {
		if(railwayrepo.existsById(id))
		{
			railwayrepo.deleteById(id);
			return "Deleted!!";
		}
		return "Invalid Id";
	}
	@Override
	public String UpdateRailway(Railway r) {
		if(railwayrepo.existsById(r.getId()))
		{
			railwayrepo.save(r);
			return "Updated!!";
		}
		return "Invalid Id";
		
	}
	
}
package com.blogs.controller;

import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.blogs.Entity.Railway;
import com.blogs.service.Irailwayservice;
@RestController
public class RailwayComntroller {
   @Autowired
   private Irailwayservice service;
	@GetMapping("/home")
	public String home() {
		return "this is the home";
	}
	@GetMapping("/railway")
	public ResponseEntity<List<Railway>> getall(){
		
		List<Railway> list= service.getAll();
		if(list!=null) {
			
			return new ResponseEntity<List<Railway>>(list,HttpStatus.OK);
			
		}
		else {
			return new ResponseEntity<List<Railway>>(list,HttpStatus.NO_CONTENT);
		}
	}
	@PutMapping("/railway")
	public Railway update(@RequestBody Railway railway) {
		return service.update(railway);
	}
	@DeleteMapping("/railway/{id}")
	public Railway delete(@PathVariable Long id) {
		 return service.delete(id);
	}
	@GetMapping("/railway/{id}")
	public ResponseEntity<Railway> getbyid(@PathVariable Long id){
		
		Railway railway = service.getbyid(id);
		if(railway!=null) {
			
			return new ResponseEntity<Railway>(railway,HttpStatus.OK);
			
		}
		else {
			return new ResponseEntity<Railway>(railway,HttpStatus.NO_CONTENT);
		}
	}
//	@PostMapping("/railway")
//   public String insert(Railway railway) {
//		return service.insert(railway);
//	}
	
	
	 @PostMapping("/railway")
	    public ResponseEntity<String> insert(@Valid @RequestBody Railway railway) {
	        String result = service.insert(railway);
	        if (result != null) {
	            return new ResponseEntity<>(result, HttpStatus.CREATED);
	        } else {
	            return new ResponseEntity<>("Failed to create the railway entry.", HttpStatus.BAD_REQUEST);
	        }
	    }
	
}
package com.app.Services;

import java.util.List;

import com.app.entities.Railway;

public interface IRailwayService {
	
	List<Railway> GetAllRailway();
	
	Railway InsertRailway(Railway newrailway);
	
	String DeleteById(Long id);
	
	String UpdateRailway(Railway r);

}
#Tomcat server port number 8080
#server.port=7070
#context path default value : empty
#server.servlet.context-path=/ems
server.servlet.session.persistent=false
#DB properties
spring.datasource.url=jdbc:mysql://localhost:3306/railways?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true
spring.datasource.username=root
spring.datasource.password=Ankur@123
# JPA properties
spring.jpa.show-sql = true
spring.jpa.hibernate.ddl-auto =update
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect
#logging.level.org.springframework.orm.hibernate5=DEBUG

# Spring MVC ViewResolver related
#spring.mvc.view.prefix=/WEB-INF/views
#spring.mvc.view.suffix=.jsp
#Disable open session in view 
spring.jpa.open-in-view=false
#property to disable hibernateLazyInitializer during initialized proxies
#spring.jackson.serialization.FAIL_ON_EMPTY_BEANS=false





<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.7.18</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
	<artifactId>spring_boot_backend_template</artifactId>
	<version>0.0.1</version>
	<name>spring_boot_backend_template</name>
	<description>Template Project for Spring Boot based Backend </description>
	<properties>
		<java.version>11</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.springdoc/springdoc-openapi-ui -->
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-ui</artifactId>
			<version>1.7.0</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.modelmapper/modelmapper -->
		<dependency>
			<groupId>org.modelmapper</groupId>
			<artifactId>modelmapper</artifactId>
			<version>3.0.0</version>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.11.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<!-- <version>3.14.0</version> -->
		</dependency>



		
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>


